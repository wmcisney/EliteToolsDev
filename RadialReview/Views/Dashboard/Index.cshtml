@model RadialReview.Controllers.DashboardController.DashboardVM

@{
	ViewBag.Title = "Workspace";
	ViewBag.LayoutClass = (ViewBag.LayoutClass ?? "") + " dashboard";
	Layout = "~/Views/Shared/_Layout.cshtml";
	ViewBag.AnyL10s = ViewBag.AnyL10s ?? false;
	ViewBag.FullWidth = true;
}

@section top{
	<div class="jumbotron">
		@if (ViewBag.WorkspaceName == null) {
			<h1><i>Elite</i>Tools<sup style="top: -0.72em;font-size: 50%;">®</sup> </h1>
		} else {
			<h1 class="dashboard_txt_@Model.DashboardId">@ViewBag.WorkspaceName</h1>
		}
		@if (Model.ShowV2) {
			<div class="v2-fill">
				<span class="v2-pill">Elite<sup>®</sup> Tools is ready!</span>
				@if (Model.ShowMigrateV2) {
					<a class="v2-btn" href="/v2020">Sign up to migrate!</a>
				} else {
					<a class="v2-btn" href="/v2020">Learn about Elite Tools!</a>
				}
			</div>
			<style>
				.jumbotron {
					height: 70px !important;
				}

				.v2-fill {
					background: #3a5dab;
					top: 26px;
					position: relative;
					height: 44px;
				}

				.grid-container {
					top: 82px;
				}

				.v2-btn {
					right: 6px;
					position: absolute;
					/*width: 157px !important;*/
					padding: 1px 15px;
					color: white;
					border: 6px outset #103382;
					background: #06256d;
					color: white !important;
					top: 5px;
					text-decoration: none;
				}

					.v2-btn:hover,
					.v2-btn:active,
					.v2-btn:focus {
						text-decoration: none !important;
					}

					.v2-btn:active {
						border-style: inset;
					}

				.v2-pill {
					/*border: 6px dotted white;*/

					color: white;
					padding: 2px 10px;
					border-radius: 17px;
					position: absolute;
					top: 10px;
					font-size: 13px;
					font-weight: bold;
					left: 15px;
				}

					.v2-pill sup {
						font-size: 57%;
					}
			</style>
		}

	</div>
	<div class="workspace-title hidden">@ViewBag.WorkspaceName</div>

}

@using (Html.BeginScripts()) {
	@*<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>*@
	@Scripts.Render("~/bundles/DashboardGrid")

	if (ViewBag.CurrentRecurrenceId is long) {
		<script>
			window.recurrenceId = @ViewBag.CurrentRecurrenceId;
		</script>
	}

	<script type="text/javascript">



		dataDateRange = {
			startDate : null,
			endDate:null,
			todoStart : new Date().setDate(new Date().getDate() - 1),
			todoEnd:null
		};
		function buildGrid(data) {
			if (showJsonAlert(data, true, true)) {
				Grid.buildElements($('#grid'), data.Object, function(changed) {
					if (changed.length == 0)
						return;
					var arr = [];
					for (var cc in changed) {
						var c = changed[cc];
						arr.push({ x: c.x, y: c.y, w: c.w, h: c.h, id: c.id });
					}
					var dat = {
						id: @(Model.DashboardId),
						model: arr,
					};
					$.ajax({
						traditional:true,
						contentType: "application/json; charset=utf-8",
						method: "post",
						data: JSON.stringify( dat),
						url: "/Dashboard/UpdateTiles/",
						success: function(data) {
							showJsonAlert(data, false, true);
						}
					});
				});
			}
			$(".grid").addClass("post-load");
		}
		$(function() {
			var tileJson = @(new HtmlString(Model.TileJson));

			@*@if (Model.TileUrls != null) {
				foreach (var i in Model.TileUrls) {
					@:try { prefetch("@(i)"); } catch (e) { console.error("tile prefetch:", e);}
				}
			}*@

			buildGrid(tileJson);

			try {

				if (tileJson.Object.length == 0) {
					setTimeout(function () {
						if ($(".add-tile").is(":visible")) {
							showAlert("Your workspace looks a bit empty...<br/> Click 'Add Tile' to get started.", 6000);
						} else {
							showAlert("Your workspace looks a bit empty...<br/> Login with your computer to add some tiles.", 6000);

						}
					}, 1)
				}
			} catch (e) {
				console.warn(e);
			}

		});

		function initTiles() {
			meetingCallback();
		}


		function deletePage(id) {
			showModal({
				title: "Are you sure you want to delete this workspace?",
				icon: "danger",
				success: function () {
					$.ajax({
						data: {
							delete: true
						},
						url: "/Dashboard/EditDashboard/" + id,
						success: function () {
							window.location = "/"; s
						}
					});
				}
			})
		}
		function makePrimaryPage() {
			$.ajax({
				url: "/dashboard/sethome?id=@(Model.DashboardModelId)&type=@(Model.DashboardModelType)"
			});
		}

		function renamePage(id, self, deflt) {
			var t = $(".workspace-title").text().trim();
			var fields = [{
				name:"title",
				text:"Title",
				value: t
			}];

			showModal({
				title:"Edit Workspace page",
				fields:fields,
				push:"/Dashboard/EditDashboard/"+id,
				success:function(d){
					if (d.Object.deleted){
						if (@Model.DashboardId == id){
							window.location="/Dashboard/";
						}else{
							$(".dashboard_txt_"+id).closest("li").remove();
							showAlert("Workspace deleted");
						}
					} else {
						$(".workspace-title").html(d.Object.title);
						$(".dashboard_txt_"+id).html(d.Object.title);
					}
				}
			});
		}

		function createTile(url,type,keyId) {
			if(typeof(keyId)=="undefined")
				keyId=null;
			var dat = {
				id: @(Model.DashboardId),
				type:type,
				dataUrl:url,
				keyId:keyId,
				x:0,y:100
			};
			$.ajax({
				url: "/Dashboard/CreateTile/",
				data: dat,
				success: function(data) {
                    if (showJsonAlert(data, false, true)) {
                        Grid.addTile(data.Object);
                        var scrollAmount = ($(document).height() - $(window).height());
                        $('html,body').animate({ scrollTop: scrollAmount }, 500);
					}
				}
			});
		}
	</script>

	if (ViewBag.DisableEditTiles ?? false) {
		<script>
			$(".add-tile,.generated-not-allowed").attr("title", "This workspace cannot be edited.").css({ "opacity": .5, "cursor": "not-allowed" })
				.find("button,a").css({ "pointer-events": "none" });
			window.AllowDragDrop = false;
		</script>
		<style>
			.settings-container, .resizer {
				display: none !important;
			}

			.grid-container li .heading {
				cursor: default;
			}
		</style>
	}
	if (ViewBag.InitialModel is String) {
		<script>
			window.InitialModel = @(new HtmlString(ViewBag.InitialModel));
		</script>
	}
}
@section topSection{
	<div class="ng-cloak2" ng-app="L10App">
		<div ng-controller="L10Controller">
}
<!-- Single button -->
<div class="btn-group add-tile" style="position: fixed;top: 25px;z-index: 1001;color:white">
	<button type="button" class="btn btn-link clickable dropdown-toggle" style="color: white
" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
		Add Tile <span class="caret"></span>
	</button>
	<ul class="dropdown-menu">
		<li class="dropdown-submenu">
			<a tabindex="-1">Personal<span class="extra-padding-1"></span><span class="extra-padding-2"></span><span class="extra-padding-3"></span></a>
			<ul class="dropdown-menu" style="">
				<li><a onclick="createTile('/TileData/UserTodo2','Url')">To-do List</a></li>
				<li><a onclick="createTile('/TileData/UserScorecard2','Url')">Scorecard</a></li>
				<li><a onclick="createTile('/TileData/UserRock2','Url')">@Html.Organization().Settings.RockName</a></li>
				<li><a onclick="createTile('/TileData/Milestones','Url')">Milestones</a></li>
				<li><a onclick="createTile('/TileData/UserRoles','Url')">Roles</a></li>
				@if (ViewBag.IsManager) {
					<li><a onclick="createTile('/TileData/UserManage2', 'Url') ">Direct Reports</a></li>
				}
				<li><a onclick="createTile('/TileData/UserNotes','Url')">Personal Notes</a></li>
				<li><a onclick="createTile('/TileData/UserProfile2','Url')">Profile Picture</a></li>
				<!--<li><a onclick="createTile('/TileData/UserNotifications','Url')">Notifications</a></li>-->
				@if (ViewBag.ShowCoreProcess ?? false) {
					<li class="divider"></li>
					<li><a onclick="createTile('/TileData/CoreProcesses','Url')">Core Processes</a></li>
					<li><a onclick="createTile('/TileData/Tasks','Url')">Tasks</a></li>
				}
			</ul>
		</li>
		<li class="dropdown-submenu">
			<a tabindex="-1">@Html.Organization().GetName() <span class="extra-padding-1"></span><span class="extra-padding-2"></span><span class="extra-padding-3"></span></a>
			<ul class="dropdown-menu" style="">
				<li><a onclick="createTile('/TileData/OrganizationValues','Url')">Core Values</a></li>
			</ul>
		</li>
		@if (Model.L10s.Any()) {
			if (Model.L10s.Count > 8) {
				<li class="dropdown-submenu">
					<a tabindex="-1">L10s <span class="extra-padding-1"></span><span class="extra-padding-2"></span><span class="extra-padding-3"></span></a>
					<ul class="dropdown-menu" style="">
						@{Html.RenderPartial("_L10TileList", Model.L10s);}
					</ul>
				</li>
			} else {
				<li class="divider"></li>
				Html.RenderPartial("_L10TileList", Model.L10s);
			}
		}
		<li class="divider"></li>
		<li class="dropdown-submenu">
			<a tabindex="-1">Traction<sup style="font-size: 8px;top: -5px;">®</sup> Tools<span class="extra-padding-1"></span><span class="extra-padding-2"></span><span class="extra-padding-3"></span></a>
			<ul class="dropdown-menu" style="">
				<li><a onclick="createTile('/TileData/FAQTips','Url')">FAQ Guide</a></li>
				<li><a onclick="createTile('/TileData/SoftwareUpdates','Url')">Software Updates</a></li>
			</ul>
		</li>
	</ul>
</div>
<div class="btn-group edit-page" style="position: fixed;top: 25px;left:90px;z-index: 1001;color:white">
	<button type="button"
			class="btn btn-link clickable dropdown-toggle"
			style="color:white" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
		Edit <span class="caret"></span>
	</button>

	<ul class="dropdown-menu">
		<li>
			<a href="#" onclick="makePrimaryPage(@Model.DashboardId)">Make Primary Workspace</a>
		</li>
		<li class="generated-not-allowed">
			<a href="#" onclick="renamePage(@Model.DashboardId,this,'@((""+ViewBag.WorkspaceName).ToLower().Replace("'","\\'"))')">Rename Workspace</a>
		</li>
		<li class="generated-not-allowed">
			<a href="#" onclick="deletePage(@Model.DashboardId,this,'@((""+ViewBag.WorkspaceName).ToLower().Replace("'","\\'"))')">Delete Workspace</a>
		</li>
	</ul>

</div>
@*<div class="btn-group add-pages" style="position: fixed;top: 25px;left:90px;z-index: 1001;color:white">
		<button type="button" class="btn btn-link clickable dropdown-toggle" style="color:white" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
			Pages <span class="caret"></span>
		</button>
		<ul class="dropdown-menu">
			@foreach (var dashboard in Model.Dashboards)  class{
				<li>
					<a href="#">
						<span class="dashboard_txt_@dashboard.Value dashtitle" onclick="window.location='/Dashboard/Index/@dashboard.Value'">@dashboard.Text</span>
						<span class="glyphicon glyphicon-edit gray clickable" onclick="renamePage(@dashboard.Value,this,@((""+dashboard.Selected).ToLower()))"></span>
					</a>
				</li>
			}
			<li class="divider"></li>
			<li><a onclick="addPage()">Add Page</a></li>
		</ul>
	</div>
	<div class="btn-group l10-pages">
		<button type="button" class="btn btn-link clickable dropdown-toggle" style="color:white" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
			Meetings <span class="caret"></span>
		</button>
		<ul class="dropdown-menu">
			@foreach (var l10 in Model.L10s.OrderBy(x=>x.StarDate)) {
				<li>
					<a href="#">
						<span class="dashtitle" onclick="window.location='/Dashboard/Generate/@l10.Value?type=L10'">@l10.Text</span>
					</a>
				</li>
			}
		</ul>
	</div>*@
<div class="meeting-review ng-cloa2k grid-container minimal-editing">
	<div ng-controller2="L10Controller">
		@Html.Partial("~/Views/Angular/_L10App.cshtml", (long)ViewBag.UserId, new ViewDataDictionary(){
			{ "IncludeComplete", false},
			{ "PullUrl","/DashboardData/Data2/" + ViewBag.UserId + "?dashboardId="+ Model.DashboardId+"&recurrenceId={0}&"}
		})
		<ul id="grid" class="grid">
			<li class="position-highlight">
				<div class="inner"></div>
			</li>
		</ul>
	</div>
</div>
@section bottomSection{
</div>
</div>
}
@using (Html.BeginStyles()) {
	@*KEEP AT THE BOTTOM*@
	<style>
		.welcome a {
			color: #4A79FF;
		}

		h3 {
			color: #6D6D6D;
		}

		.todo-pane {
			max-height: 360px;
			overflow: auto;
			width: 100%;
		}

		#alerts .alert {
			z-index: 1000;
		}

		.l10-pages {
			position: fixed;
			top: 25px;
			left: 162px;
			z-index: 1001;
			color: white;
		}

		@@media (max-width: 768px) {
			.l10-pages {
				left: 60px;
			}
		}
	</style>
	@Styles.Render("~/styles/Dashboard");
}
@*@using (Html.BeginScripts()) {
		@Scripts.Render("~/bundles/DashboardPostAngular")
	}*@
